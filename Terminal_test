import random
import textwrap
import os

# Game Setup
player = {
    "location": "Front Porch",
    "inventory": [],
    "found_evidence": 0,
    "turns_left": 45,
    "actions_taken": 0
}

# Define potential containers
containers = ["dresser", "cupboard", "drawer", "shelf", "box", "nightstand", "desk drawer", "medicine cabinet", "workbench"]

rooms = {
    "Front Porch": {"description": "The rotted wooden porch creaks under your feet. The front door, a heavy oak, is slightly ajar. A chilling breeze whispers through the overgrown ivy.", "exits": {"inside": "Foyer"}, "objects": [], "possible_containers": []},
    "Foyer": {"description": "A grand, yet decaying foyer. A crystal chandelier hangs precariously overhead, coated in dust. A wide staircase ascends to the upper floor. To the west, you see a shadowed living room, and to the east, a formal dining room.", "exits": {"upstairs": "Hallway", "west": "Living Room", "east": "Dining Room"}, "objects": ["dusty table"], "possible_containers": ["dusty table"]},
    "Living Room": {"description": "Overturned armchairs and a tattered sofa litter the living room. The air is thick with the smell of stale tobacco. A cold fireplace is the room's centerpiece. You might want to 'examine fireplace'.", "exits": {"east": "Foyer"}, "objects": ["fireplace"], "possible_containers": ["fireplace"]},
    "Dining Room": {"description": "A long, mahogany dining table is draped with a moth-eaten cloth. The silverware is tarnished, and cobwebs cling to the empty chairs.", "exits": {"west": "Foyer", "south": "Kitchen"}, "objects": ["dining table"], "possible_containers": ["cupboard"]},
    "Kitchen": {"description": "The kitchen is a scene of chaotic disarray. Broken plates and scattered utensils cover the floor. The back door is heavily boarded up. You see a glint of metal near the sink.", "exits": {"north": "Dining Room"}, "objects": ["sink", "broken plates"], "possible_containers": []},
    "Library": {"description": "Towering bookshelves line the walls, filled with crumbling books. A large, oak desk sits in the center - its drawers slightly ajar and a book about urban demolition sitting open on top, featuring a wrecking ball doing what they do best.", "exits": {"east": "Foyer"}, "objects": ["bookshelves"], "possible_containers": ["desk", "bookshelves"]},
    "Hallway": {"description": "The upstairs hallway is eerily silent. Moonlight spills through a grimy window at the end of the hall. Doors lead to several bedrooms and a bathroom. The attic entrance is a dark, imposing doorway.", "exits": {"downstairs": "Foyer", "north": "Master Bedroom", "south": "Guest Bedroom 1", "east": "Guest Bedroom 2", "west": "Bathroom", "up": "Attic Entrance"}, "objects": [], "possible_containers": []},
    "Master Bedroom": {"description": "A massive four-poster bed dominates the room, its velvet curtains ripped and faded.","exits": {"south": "Hallway"},"objects": ["bed"], "possible_containers": ["nightstand"]},
    "Guest Bedroom 1": {"description": "A small, spartan bedroom with a single bed. A child's toy, a red SUV, sits forlornly on the floor. You might want to 'examine toy red suv'.", "exits": {"north": "Hallway"}, "objects": ["bed"], "possible_containers": ["bed"]},
    "Guest Bedroom 2": {"description": "This room was clearly a study. A large, cluttered desk is covered in papers and strange diagrams. A camera rests on the desk. You might want to 'examine camera'.", "exits": {"west": "Hallway"}, "objects": [], "possible_containers": ["desk"]},
    "Bathroom": {"description": "The air is thick with the stench of mildew. A cracked mirror reflects your uneasy face. The medicine cabinet hangs open.", "exits": {"east": "Hallway"}, "objects": ["mirror"], "possible_containers": ["medicine cabinet"]},
    "Attic Entrance": {"description": "A dark and ominous entrance to the attic. It's secured with a heavy-looking lock.", "exits": {"down": "Hallway"}, "locked": True, "objects": [], "possible_containers": []},
    "Attic": {"description": "The attic is filled with dusty boxes and forgotten relics. You feel a strange presence here. A single newspaper clipping is pinned to a crate.", "exits": {"down": "Attic Entrance"}, "objects": ["crate"], "possible_containers": ["crate"]},
    "Basement Stairs": {"description": "A set of creaking wooden stairs leading down into the darkness. A padlock secures the entrance.", "exits": {"up": "Foyer", "down": "Main Basement Area"}, "locked": True, "objects": [], "possible_containers": []},
    "Main Basement Area": {"description": "The air in the basement is cold and damp. Pipes groan overhead, and the smell of mildew is overpowering. A workbench is covered in tools. A door to a Storage Room is to the south.", "exits": {"up": "Basement Stairs", "south": "Storage Room"}, "objects": [], "possible_containers": ["workbench"]},
    "Storage Room": {"description": "A cramped storage room filled with shelves of dusty jars and forgotten equipment. You feel an intense sense of dread.", "exits": {"north": "Main Basement Area"}, "objects": ["shelves"], "possible_containers": ["shelves"]}
}

ceiling_fan_pulled = False

escape_mode = False

# Initialize interaction counters globally (or within the play_game function if you prefer)
sink_interactions = 0
crate_interactions = 0
stairs_interactions = 0
bookshelves_interactions = 0

evidence = {
    "Brick": {"found": False, "location": "Living Room"},
    "Toy SUV": {"found": False, "location": "Guest Bedroom 1"},
    "Camera": {"found": False, "location": "Guest Bedroom 2"},
    "Newspaper Clipping": {"found": False, "location": "Attic"} # Fixed location
}

keys = {
    "Attic Key": {"found": False, "location": "Library"},
    "Basement Key": {"found": False, "location": "Bathroom"},
    "Storage Room Key": {"found": False, "location": "Main Basement Area"}
}
# Function to assign random containers to items
def randomize_item_locations():
    # Assign random containers to keys
    for key_name, key_info in keys.items():
        # Get the room where the key is supposed to be
        room_name = key_info['location']
        # Get the list of possible containers in that room
        containers_in_room = rooms[room_name]['possible_containers']
        if containers_in_room:
            # Choose a random container from the list
            keys[key_name]['container'] = random.choice(containers_in_room)
        else:
            # This should ideally not happen if all key locations have containers
            keys[key_name]['container'] = "somewhere in the room"
            print(f"Warning: No containers found in {room_name} for {key_name}")

    # Assign random containers to evidence (excluding Newspaper Clipping)
    for evidence_name, evidence_info in evidence.items():
        if evidence_name != "Newspaper Clipping":
            # Get the room where the evidence is supposed to be
            room_name = evidence_info['location']
            # Get the list of possible containers in that room
            containers_in_room = rooms[room_name]['possible_containers']
            if containers_in_room:
                # Choose a random container from the list
                evidence[evidence_name]['container'] = random.choice(containers_in_room)
            else:
                # This should ideally not happen if all evidence locations have containers
                evidence[evidence_name]['container'] = "somewhere in the room"
                print(f"Warning: No containers found in {room_name} for {evidence_name}")

# Call the randomization function at the start of the game
randomize_item_locations()

# Final Room (Attic)
final_room = "Attic"

def get_terminal_width():
    try:
        columns = os.get_terminal_size().columns
        return columns
    except OSError:
        # Handle cases where the terminal size can't be determined
        return 80  # Default width

def display_status():
    width = get_terminal_width()
    wrapped_description = textwrap.fill(rooms[player['location']]['description'], width=width)

    print(f"\n--- {player['location']} ---")
    print(wrapped_description)
    if rooms[player['location']]['objects']:
        print("You see the following objects here:", ", ".join(rooms[player['location']]['objects']))
    print(f"Turns Left: {player['turns_left']}")
    print("Inventory:", ", ".join(player['inventory']))
    found_evidence_names = [name for name, info in evidence.items() if info['found']]
    print("Evidence Found:", ", ".join(found_evidence_names) if found_evidence_names else "None")
    print("Exits:")
    for direction, room in rooms[player['location']]['exits'].items():
        locked_status = " (Locked)" if rooms[room].get('locked') else ""
        print(f"- {direction}: {room}{locked_status}")
    print("\nPossible Actions: look around, go [inside, west, upstairs, etc.], examine [object], take [item], unlock [room], look in [container], inventory, time, quit")
    if player['turns_left'] <= 14 and player['turns_left'] > 0:
        if random.random() < 0.6: # 60% chance
            print("\nThe roar of heavy machinery is deafening. You can hear the distinct sound of impacts nearby. You must have been mistaken about the demolition, it's happening now! Time is running out!")
    elif player['turns_left'] <= 29 and player['turns_left'] > 15:
        if random.random() < 0.4:
            print("\nThe mechanical sounds are getting louder. You can hear distinct grinding and the rumble of an engine.")
    elif player['turns_left'] <= 44 and player['turns_left'] > 30:
        if random.random() < 0.2:
            print("\nThe distant hum is more noticeable now, and you occasionally hear a metallic clank.")
    elif player['turns_left'] <= 60 and player['turns_left'] > 45 and random.random() < 0.1:
        print("\nYou hear a faint, distant hum, like machinery far away, getting ready for a busy day in the morning.")
def get_input():
    return input("> ").lower().split()

def move(command):
    if len(command) < 2:
        print("Go where?")
        return
    direction = command[1]
    current_room = player['location']
    if direction in rooms[current_room]['exits']:
        next_room = rooms[current_room]['exits'][direction]
        if next_room in rooms and rooms[next_room].get('locked') and not any(key in player['inventory'] for key, info in keys.items() if info['location'] == next_room):
            print("That way is locked.")
        else:
            if current_room == "Front Porch" and next_room == "Foyer":
                print("The porch floorboards bend and snap under your feet as your weight leaves them. It feels like they could break at any second if any more weight had been applied.")
                print("You jump through the doorway to avoid breaking the patio floorboards. The heavy front door slams shut behind you, causing the crystal chandelier overhead to shudder violently. The cable anchoring the bourgeoise behemoth groans under the new momentum as the wind from the door causes it to sway in your direction.")
            player['location'] = next_room
            player['turns_left'] -= 1
            if rooms[player['location']].get('hazard'):
                if rooms[player['location']]['hazard'] == "weak floor" and random.random() < 0.3: # 30% chance on entering
                    print("\n" + rooms[player['location']]['hazard_description'])
                    return True # Indicate death
                elif rooms[player['location']]['hazard'] == "unstable stairs" and next_room == "Main Basement Area":
                    print("\n" + rooms[player['location']]['hazard_description'])
                    return True # Indicate death
    else:
        print("You can't go that way.")
    return False # No death

def handle_evidence_examination(command, evidence_item):
    item = " ".join(command[1:])  # Get the item the player is trying to examine
    if player['location'] == evidence[evidence_item]["location"] and item.lower() in evidence_item.lower() and not evidence[evidence_item]["found"]:
        print(f"You find a piece of evidence: {evidence_item}.")
        evidence[evidence_item]["found"] = True
        player['found_evidence'] += 1
        return True
    return False

def examine(command):
    global ceiling_fan_pulled
    global sink_interactions, crate_interactions, stairs_interactions, bookshelves_interactions

    if len(command) < 2:
        print("Examine what?")
        return
    item = " ".join(command[1:])
    current_room = player['location']
    evidence_found_this_turn = False
    specific_interaction = False # Flag to track if a specific interaction occurred

    evidence_items_to_check = ["Brick", "Toy SUV", "Camera"]
    for ev_item in evidence_items_to_check:
        if handle_evidence_examination(command, ev_item): # Pass the 'command' here
            evidence_found_this_turn = True
            specific_interaction = True
            # Potentially add room object updates here if needed
            break

    # Specific evidence triggers on examination
    if player['location'] == evidence["Brick"]["location"] and item.lower() == "fireplace" and not evidence["Brick"]["found"]:
        print("\nYou examine the fireplace closely. You notice a loose brick. Carefully, you dislodge it. It's surprisingly heavy and stained with what looks like dried blood. Behind it, you find a small, faded photograph. On the back, you can make out the name 'Alex' and a date. You think you saw a shadow pass over something deeper in the fireplace, too. You can reexamine if you want to take a closer look..")
        evidence["Brick"]["found"] = True
        player['found_evidence'] += 1
        evidence_found_this_turn = True
        rooms["Living Room"]["objects"].append("Brick")
        specific_interaction = True

    # Collapsing Fireplace Hazard (after finding the brick)
    elif player['location'] == "Living Room" and item.lower() == "fireplace" and evidence["Brick"]["found"]:
        width = get_terminal_width()
        if random.random() < 0.6: # 60% chance of collapse after finding the brick
            print("\nYou examine the fireplace again. The structure seems unstable after you removed the brick. Suddenly, with a loud groan, parts of the mantelpiece and chimney collapse, sending debris crashing down on you. You are crushed beneath the weight of the falling stone.")
            return True
        else:
            print("You examine the fireplace again. It looks unstable, but nothing happens this time.")
        specific_interaction = True
    elif player['location'] == evidence["Toy SUV"]["location"] and item.lower() == "toy red suv" and not evidence["Toy SUV"]["found"]:
        print("\nYou pick up the small red toy SUV. It feels strangely heavy for its size. An unsettling feeling washes over you. This is a replica of the vehicle Kimberly C was driving when the Route 18 pileup happened. Her friends died in this truck, and you almost think you can see the outlines of people inside the tiny little die cast toy.")
        evidence["Toy SUV"]["found"] = True
        player['found_evidence'] += 1
        evidence_found_this_turn = True
        specific_interaction = True
    elif player['location'] == evidence["Camera"]["location"] and item.lower() == "camera" and not evidence["Camera"]["found"]:
        print("\nYou find a digital camera on the desk. Flipping through the photos, you see a series of disturbing images taken during a high school graduation night at the local amusement park, hinting at various accidents that took the lives of a bunch of students who were kind of garbage. Like, not actively bad, but nobody really missed them when they were gone, you know?")
        evidence["Camera"]["found"] = True
        player['found_evidence'] += 1
        evidence_found_this_turn = True
        specific_interaction = True
    elif player['location'] == "Master Bedroom" and item.lower() == "nightstand":
        print("\nYou examine the nightstand. It's a simple wooden table. You notice a bloodstained journal on top.")
        if "bloodstained journal" not in rooms["Master Bedroom"]["objects"]:
            rooms["Master Bedroom"]["objects"].append("bloodstained journal")
        specific_interaction = True
    elif player['location'] == "Master Bedroom" and item.lower() == "bloodstained journal" and "bloodstained journal" in rooms["Master Bedroom"]["objects"]:
        print("\nYou examine the bloodstained journal. A faint, unsettling energy seems to emanate from its aged pages. You cautiously open it and read a final, desperate entry, the words scrawled with a chilling urgency: 'The accidents... you've witnessed them, haven't you? Dismissed them as mere chance? Folly. It is the List. Always has been. Death... a meticulous architect, reclaiming what is due. I have glimpsed the design, the terrible elegance of its purpose. The key, I believe... the key lies in understanding its hunger, its need for balance. To truly defy it, one must...' The ink here is smeared, as if the writer was interrupted by a sudden, violent act. The final words are lost to time and blood.")
        specific_interaction = True
    elif player['location'] == "Master Bedroom" and item.lower() == "ceiling fan with chains":
        if not ceiling_fan_pulled:
            ceiling_fan_pulled = True
            if random.random() < 0.4: # 40% chance of collapse on the first pull
                print("\nYou reach up and pull one of the chains on the ceiling fan. With a sudden, terrifying crack, the aged plaster around the fan mount gives way. The entire fixture, blades and all, tears free from the ceiling, plummeting towards you.")
                print("The heavy motor slams into your skull, and the spinning blades slice through the air. You collapse, a mangled mess, as the rest of the ceiling rains down, burying you in dust and debris.")
                return True
            else:
                print("You pull one of the chains on the ceiling fan. It seems to adjust the speed. The fixture wobbles slightly, making you uneasy.")
        else:
            print("\nYou reach up and pull the chain again. This time, there's no wobble, only a sickening ripping sound. The remaining support gives way entirely.")
            print("The ceiling fan detaches completely, falling with lethal force. The edge of a blade catches your neck, tearing through flesh and artery. You gasp, blood spurting, as the weight of the motor crushes your chest. Darkness takes you swiftly.")
            return True

    # Environmental Hazard Checks with Increasing Probability
    if current_room == "Kitchen" and "sink" in item.lower():
        sink_interactions += 1
        width = get_terminal_width()
        # Increase probability based on interactions (example: 0.1 + interactions * 0.05)
        death_chance = 0.1 + sink_interactions * 0.05
        if random.random() < death_chance:
            print("\nYou examine the sink closely again. The sparking intensifies. You reach out...")
            print("A massive electrical shock courses through your body. You are instantly killed.")
            return True
        else:
            print("You examine the sink. The wiring sparks at you like you owe it money, but nothing happens ..this time.")
        specific_interaction = True
    elif current_room == "Attic" and "crate" in item.lower():
        crate_interactions += 1
        width = get_terminal_width()
        death_chance = 0.05 + crate_interactions * 0.04
        if random.random() < death_chance:
            print("\nYou examine the crate again. You hear a worrying creak from above...")
            print("The stack of boxes collapses, and one hits you squarely on the head. You die instantly.")
            return True
        else:
            print("You examine the crate. It seems sturdy, but the boxes above shift slightly.")
        specific_interaction = True
    elif current_room == "Basement Stairs" and "stairs" in item.lower():
   